---

# Default compose file for development and production.
# Should be used directly in development.
# Automatically loads `docker-compose.override.yml` if it exists.
# No extra steps required.
# Should be used together with `docker/docker-compose.prod.yml`
# in production.


version: "3.8"
services:
  db:
    image: "postgres:14-alpine"
    restart: unless-stopped
    volumes:
      - {{ cookiecutter.project_slug }}-pgdata:/var/lib/postgresql/data
    env_file: .env

  django:
    <<: &django
      image: "{{ cookiecutter.project_slug }}:dev"
      build:
        target: development_build
        context: .
        dockerfile: ./docker/django/Dockerfile
        args:
          DJANGO_ENV: development
        cache_from:
          - "{{ cookiecutter.project_slug }}:dev"
          - "{{ cookiecutter.project_slug }}:latest"
          - "*"
      volumes:
        - django-static:/var/www/django/static
      depends_on:
        - db
      env_file: .env
      environment:
        DJANGO_DATABASE_HOST: db
    command: sh ./docker/django/run.sh
    healthcheck:
      # We use `$$` here because:
      # one `$` goes to shell,
      # one `$` goes to `docker-compose.yml` escaping
      test: |
        /usr/bin/test $$(
          /usr/bin/curl --fail http://localhost:8000/health/?format=json
          --write-out "%{http_code}" --silent --output /dev/null
        ) -eq 200
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s


# This task is an example of how to extend existing ones:
#   some_worker:
#     <<: *django
#     command: python manage.py worker_process


volumes:
  {{ cookiecutter.project_slug }}-pgdata:
  django-static:
